import pyDes


# padding the key to make it exactly 8 bytes
def pad(key):
    paddingValue = 8 - len(key)
    return key[:8] if len(key) >= 8 else (key + bytes(str(paddingValue) * paddingValue, encoding='utf-8'))


# Function to encrypt a file using AES
def encrypt_file(key, input_file, output_file):

    chunk_size = 64 * 1024  # 64KB chunk size
    key = pad(key)

    # DES encryption object with the given key
    des = pyDes.des(key, pyDes.ECB, padmode=pyDes.PAD_PKCS5)

    with open(input_file, 'rb') as file_in, open(output_file, 'wb') as file_out:
        while True:
            chunk = file_in.read(chunk_size)
            if len(chunk) == 0:
                break

            # Encrypt the chunk
            encrypted_chunk = des.encrypt(chunk)

            # Write the encrypted chunk to the output file
            file_out.write(encrypted_chunk)


# Function to decrypt a file using AES
def decrypt_file(key, input_file, output_file):

    chunk_size = 64 * 1024  # 64KB chunk size
    key = pad(key)

    # DES decryption object with the given key
    des = pyDes.des(key, pyDes.ECB, padmode=pyDes.PAD_PKCS5)

    with open(input_file, 'rb') as file_in, open(output_file, 'wb') as file_out:
        while True:
            chunk = file_in.read(chunk_size)
            if len(chunk) == 0:
                break

            # Encrypt the chunk
            decrypted_chunk = des.decrypt(chunk)

            # Write the encrypted chunk to the output file
            file_out.write(decrypted_chunk)

# Encrypt the image file
key = b'mysecretkey'

encrypt_file(key, "Jack-Sparrow-Johnny-Depp.png", "encrypted_image.jpg")
decrypt_file(key, "encrypted_image.jpg", "decrypted_image.jpg")

